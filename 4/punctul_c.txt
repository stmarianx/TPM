
Pentru a demonstra proprietatile cerute pentru grupa de vineri,
vom analiza execuția concurenta a metodei choose de catre n>1 thread-uri. Vom arata:

Cel mult un thread poate obtine valoarea "red".
Cel mult n−1 thread-uri pot obtine valoarea "white".

1. Cel mult un thread poate obtine "red":


Inițializare:

Toate thread-urile pornesc cu variabilele partajate getWhite = false și last = 0.

Fluxul de executie:

Fiecare thread apelează choose() și executa urmatorii pasi:
1. Citeste propriul ID unic me folosind ThreadId.get().
2. Actualizeaza variabila partajata last cu valoarea me.
3. Verifica daca getWhite este true. Daca da, returneaza "white".
4. Set getWhite la true.
5. Verifica daca last == me. Dacă da, returneaza "red"; altfel, returneaza "black".

Concurenta:
Primul thread (Thread_1) care ajunge la pasul 3 cand getWhite este incă false va continua la pasul 4.
Dupa ce seteaza getWhite = true la pasul 4, Thread_1 verifica if (last == me) la pasul 5.
Deoarece Thread_1 a actualizat last cu propriul me la pasul 2 și
niciun alt thread nu a modificat last intre timp, last == me este adevarat.
Thread_1 returnează "red".

Celelalte thread-uri:

Orice thread ulterior care ajunge la pasul 3 va găsi getWhite = true (setat de Thread_1).
Ca rezultat, aceste thread-uri returnează imediat "white" la pasul 3 și nu continuă cu pașii 4 și 5.

Concluzie:

Doar un thread poate ajunge la pasul 5 unde last == me ar putea fi adevarat
Prin urmare, cel mult un thread poate obține "red".

2. Cel mult  n−1 thread-uri pot obtine "white":
Explicatie:

Thread-uri care returnează "white":

Toate thread-urile, cu exceptia celui care a setat getWhite = true primul (care a returnat "red"),
vor gasi getWhite = true la pasul 3.
Aceste thread-uri vor returna imediat "white" la pasul 3.
Numarul maxim de thread-uri:

Deoarece doar un thread poate obține "red", restul de n−1 thread-uri reprezinta
numarul maxim care poate obtine "white".


Deci Cel mult n−1 thread-uri pot obtine "white" deoarece un thread a obtinut deja "red".
QEd

